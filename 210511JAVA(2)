package third;

public class OperationExample {

	public static void main(String[] args) {
		/** '자동형변환' 주의사항:정수가 실수로 자동형변환시 **/
		int num1=123456780;
		int num2=123456780;
		
		float num3=num2; //int -> float 자동형변환한다.(근데 오차가 발생) 해결책은 double
		num2=(int)num3;  //float->int로 변환이 안되니까 강제 형변환한다. (여기서도 오차가 발생)
		
		System.out.println(num1-num2);// float을 사용하면 오차가 발생해서 0이아닌 -4가 됨. 그러므로 높은 비트의 double사용
		
		/** 산술연산자 + - * 나누기(몫/, 나머지%)-정석97 **/
		int iv1=10;
		int iv2=3;// 10/3=3.3333....

		System.out.println("두수의 합="+iv1 + iv2); //★주의()해야 함
		System.out.println(iv1 - iv2);
		System.out.println(iv1 * iv2);
		System.out.println("두수를 나눈 몫"+iv1 / iv2);// cpu(int / int => int)
		System.out.println("두수를 나눈 나머지="+iv1 % iv2);

		System.out.println((double)iv1 / iv2);// cpu(double 10.0 / double 3.0 => double 3.333333...)

		int a=(int)(7+10.0/3);
		System.out.println(a);
		
		double b=7+10/(double)3;
		System.out.println(b);
	
		/*
		 * 강제로 형변환을 하면 데이터 손실이 발생할 가능성이 있다. 
		 * 그래서 데이터 손실이 발생하기전에 점검하는 법을 알려주겠다!
		 */
		
		byte b1=(byte)123456789;
		System.out.println(b1);//데이터 손실
		
	
		int i=-129; /* 모든 자료형은 똑같다. 자료형의 가장 최대값+1하면 가장 최소값으로 바껴버린다. 
					그반대는 최소값에다가 -1을하면 최대값이 된다.byte가 담을수 있는 가장 작은 값에다 1을 뺏다*/
		System.out.println((byte)i);//-128-1=>127이됨 이게 사이클이 도는데 왜도는지는 다음시간에 알려줌
		// 129<-128 참 ||		=>참		||	: 둘 중 하나만 참이면 참
		
		if(i<Byte.MIN_VALUE || i>Byte.MAX_VALUE) {  // i값이 바이트최소값보다 적거나 i가 바이트 최대값보다 크거나. ||:or
			System.out.println("바이트 타입으로 변환할 수 없습니다.");
			System.out.println("값을 다시 확인해 주세요.");
		}else {
			System.out.println("byte로 강제형변환 결과-1:"+(byte)i);
		}
		
		
		if(i<Byte.MIN_VALUE && i>Byte.MAX_VALUE) {  // i값이 바이트최소값보다 적거나 i가 바이트 최대값보다 크거나. ||:or
			System.out.println("byte로 강제형변환 결과-2:"+(byte)i);
		}else {
			System.out.println("바이트 타입으로 변환할 수 없습니다.");
			System.out.println("값을 다시 확인해 주세요.");
		}
		
		
		if( !(i<Byte.MIN_VALUE) && !(i>Byte.MAX_VALUE)) {  // i값이 바이트최소값보다 적거나 i가 바이트 최대값보다 크거나. ||:or
			System.out.println("byte로 강제형변환 결과-2:"+(byte)i);
		}else {
			System.out.println("바이트 타입으로 변환할 수 없습니다.");
			System.out.println("값을 다시 확인해 주세요.");
		}
		
		/**
		 * 비교연산자 다른말로 관계연산자라 한다. 
		 * 비교(관계)연산자 : 수와 수를 비교하는데 <,>,>=,<=,==간다,!=같지않다
		 * 										  65<97 => 결과가 true
		 * 										  cpu의 입장에선 'A'(65의 2진수)>'a'(97의 2진수) => false
		 * 							 			  cpu입장에선 문자도 비교가 가능하다.
		 * 논리 연산자 : sql문에선(not and or) 나오는데 순서대로 우선순위가 있다. 
		 * 			 JAVA에선(!   &&  ||)순서이다.
		 * 	단항 		!true->false, !false->true
		 * 	이항		 true && true 일때만 결과가 true가 된다.
		 * 			 true ||	  =>true
		 * 			 false|| true =>true
		 * 			 true || true =>true
		 * 			 false|| false=>false
		 * 			 || => 둘중 하나가 참이면 참이다.
		 */
		i=23;
		if(i%2==0) System.out.println("2의 배수이다.");
		else System.out.println("2의 배수가 아니다.");
		
		if(i%2!=0) System.out.println("2의 배수가 아니다.");
		else System.out.println("2의 배수이다.");
		
		if(i%3==0) System.out.println("3의 배수이다.");
		else System.out.println("3의 배수가 아니다.");
		
		//i는 '2의 배수 또는 3의 배수'이지만 '6의 배수가 아니다.'!(i%6==0)   i%6!=0
		//★주의 ()로 우선순위를 ||부터
		if((i%2==0 || i%3==0) && !(i%6==0)) System.out.println("2의 배수 또는 3의 배수이지만 6의 배수가 아니다.");
		else System.out.println("2의 배수 또는 3의 배수이지만 6의 배수가 아니다.부정");
		
		char ch1='b',ch2='a';//97<98    97a < 98b < 99c
		if(ch1<ch2) System.out.println(ch1+"문자가 "+ch2+"문자 보다 "+"앞선다.");
		else System.out.println(ch1+"문자가 "+ch2+"문자 보다 "+"뒤선다.");
		
		//유니코드에서 문자 (2진수로 '0':48, '1':49......'9':57)
		if(ch1>'0') System.out.println(ch1+"문자는 "+"0문자보다 유니코드표에서 뒤선다.");
		else System.out.println(ch1+"문자는 "+"0문자보다 유니코드표에서 앞선다.");
		
		/**자료형의 값은 사이클을 돈다. 최대값+1=최소값, 최소값-1=최대값**/
		byte b2=126;
		System.out.println(b2+1);//127
		System.out.println(b2);//126
		System.out.println(++b2);//127  b2=b2+1
		System.out.println(b2);//127
		System.out.println(b2++);//127출력한후 '127+1'증가=>최소값(-128)
		System.out.println(b2);//-128
		
		
		
		
	}
	

}
