package array_phone;

import java.awt.Menu;

class PhoneInfo {
	private String name;//이름
	private String phoneNumber;//전화번호
	
	PhoneInfo(String name, String phoneNumber) {
		super();
		this.name = name;
		this.phoneNumber = phoneNumber;
	}
	
	void showPhoneInfo(){
		System.out.println("이름 : "+name);
		System.out.println("전화번호 : "+phoneNumber);
	}

	final public String getName() {
		return name;
	}
}

class PhoneUnivInfo extends PhoneInfo{//대학동기
	String major;//전공
	int year;//학년
	
	public PhoneUnivInfo(String name, String phoneNumber, String major, int year) {
		super(name, phoneNumber);
		this.major = major;
		this.year = year;
	}

	@Override
	void showPhoneInfo() {
		super.showPhoneInfo();
		System.out.println("전공 : "+major);
		System.out.println("학년 : "+year);
	}
}

class PhoneCompanyInfo extends PhoneInfo{//회사동기
	String company;//전공

	public PhoneCompanyInfo(String name, String phoneNumber, String company) {
		super(name, phoneNumber);
		this.company = company;
	}

	@Override
	void showPhoneInfo() {
		super.showPhoneInfo();
		System.out.println("회사명 : "+company);
	}
}

public class PhoneBookManager implements PhoneManager{//폰메니저에 
	//멤버변수-포함관계
	PhoneInfo[] pi = null; //pi PhoneInfo타입만 관리하는 배열 객체 생성  //포함관계
	
	int friendCnt=0;//역활 : index + 저장된 친구수와 일치하는 역할
	
	public PhoneBookManager(int max_size){//배열은 반드시 최대크기로 만들어줌.
		//super(); 밑에 이렇게 만들면 자동으로 컴파일러가 super붙여줌
		pi=new PhoneInfo[max_size];//입력받은 수로 배열객체 생성 
	}
	
	private String name;//필요에 의해 멤버변수처럼 선언하여 사용
	private String phoneNumber;
	
	private void readBasicInfo() {
		System.out.print("이름 : ");
		name = MenuViewer.sc.next();

		System.out.print("전화번호 : ");
		phoneNumber = MenuViewer.sc.next();
	}
	
	private PhoneInfo readFriendInfo() {//실질적인 입력기능 - 일반친구들의 데이터를 입력받아 객체를 생성하는 아이
		/*
		System.out.print("이름 : ");
		String name = MenuViewer.sc.next();//위에네임과 햇갈리면안됨 이건 지역변수임

		System.out.print("전화번호 : ");
		String phoneNumber = MenuViewer.sc.next();//위에 네임과 햇갈리면안됨 이건 지역변수임
		*/
		readBasicInfo();
		return new PhoneInfo(name, phoneNumber);
	}

	private PhoneInfo readUnivFriendInfo() {
		/*
		System.out.print("이름 : ");
		String name = MenuViewer.sc.next();

		System.out.print("전화번호 : ");
		String phoneNumber = MenuViewer.sc.next();
		*/
		System.out.print("전공 : ");
		String major = MenuViewer.sc.next();

		System.out.print("학년 : ");
		int year = MenuViewer.sc.nextInt();
		
		return new PhoneUnivInfo(name, phoneNumber, major, year); //★대학 동기 객체(자식)->일반동기인(부모) 자동으로 형변환되어 리턴됨
	}
	
	private PhoneInfo readCompanyFriendInfo() {
		/*
		System.out.print("이름 : ");
		String name = MenuViewer.sc.next();

		System.out.print("전화번호 : ");
		String phoneNumber = MenuViewer.sc.next();
		*/
		System.out.print("회사명 : ");
		String company = MenuViewer.sc.next();
		
		return new PhoneCompanyInfo(name, phoneNumber, company);//★회사 동기 객체(자식)->일반동기인(부모) 자동으로 형변환되어 리턴됨
	}
	
	@Override//예외처리하는 2번째 방법 : 예외객체는 throws로 input()메서드를 메인한테 던져서 호출함. 그래서 메인측에서 처리하도록한다.
	public void inputData() throws PhoneSizeException  {//외부에 노출된 버튼 //부모에게 throws하고 나서 자식에게 있어야함.
		//추가한 친구수==배열의 크기
		if(friendCnt == pi.length) throw new PhoneSizeException();//수동으로 예외객체 생성
		
		System.out.println("친구 정보 입력을 시작합니다...");
		System.out.println("1.일반    2.대학    3.직장");
		System.out.print("선택>>");
		
		int choice=MenuViewer.sc.nextInt();
		
		PhoneInfo info=null;//지역변수
		
//		int friendCnt=0;//역활 : index + 저장된 친구수를 의미하므로 따라서 지역변수로 선언하면 아니된다. why? 값을 유지해야하기 때문
		
		switch(choice) {
		case INPUT_SELECT.NORMAL 	: info=readFriendInfo(); break;//1. 1누르면 리드프렌드 인포 리턴 하고 스위치문빠져나와서 배열에 넣음
		case INPUT_SELECT.UNIV 		: info=readUnivFriendInfo(); break;
		case INPUT_SELECT.COMPANY 	: info=readCompanyFriendInfo(); break;
		}
		
		pi[friendCnt++]=info;//배열에 해당객체의 주소를 받아서 저장 후 배열의 index를 1 증가시킨다.
		//friendCnt++;//친구 수가 1 증가
	}

	@Override
	public void searchData() {
		System.out.println("친구 정보 검색을 시작합니다...");
		
		System.out.print("검색할 친구 이름 입력 : ");
		String name = MenuViewer.sc.next();
		
		int dataIdx=search(name); 
		if(dataIdx == -1) {//'이름으로 검색'하여 정보 출력하여 보여줌
			System.out.println("검색하신 친구를 찾을 수 없습니다.");
		}else {
			pi[dataIdx].showPhoneInfo();//★자식객체라면 재정의된 메서드 호출됨
			System.out.println("친구 정보 검색을 완료합니다.\n");
		}
}

	@Override
	public void deleteData() {
		System.out.println("친구 정보 삭제를 시작합니다...");
		
		System.out.print("삭제할 친구 이름 입력 : ");
		String name = MenuViewer.sc.next();
		
		int dataIdx = search(name); 
		if(dataIdx == -1) {//'이름으로 검색'하여 정보 출력하여 보여줌
			System.out.println("삭제하실 친구를 찾을 수 없습니다.");
		}else {
			/*
			 * ★ 검색으로 리턴받은 index번호부터 시작
			 * 객체를 삭제(pi[dataIdx]=null;)하는 것이 아니라
			 * 배열 안의 주소를 이동하여 해결함
			 * 이유? 메모리를 효율적으로 사용하기 위해
			 *  	(즉,메모리 중간에 null로 사용하면 비어보인다? 채워넣어야한다? 그래서 주소를 이동하는게 효율적)
			 */
			
			//friendCnt==4, dataIdx==3이면 조건이 거짓 => for문 실행안함
			for(int i=dataIdx ; i<friendCnt-1 ; i++) {
				pi[i]=pi[i+1];
			}
			
			friendCnt--;//4->3으로 변경되어
			System.out.println("친구 정보 삭제를 완료합니다.\n");
		}
		//'이름으로 검색'하여 친구 정보 삭제
		
	}

	private int search(String name) {//같은 이름을 가진 친구객체를 배열에서 찾아서 그 객체의 index번호를 리턴
		for(int i = 0 ; i<friendCnt ; i++) {
			if(name.equals(pi[i].getName())) return i;//같은걸 찾았으면 해당된 index번호를 리턴
		}
		
		return -1;//못찾았으면 -1리턴
	}
	
//	private int delete(String name) {
//		for(int i = 0 ; i<friendCnt ; i++) {
//			if(name.equals(pi[i].name)) return i;//같은걸 찾았으면 해당된 index번호를 리턴
//		}
//		
//		return -1;
//	}
}
