public class UseVariable {

	public static void main(String[] args) {
		//논리형 : 참 true 또는 거짓 false
		boolean b;//변수선언
		b=true;
		System.out.println(b);

		boolean b1=false;//변수 선언과 동시에 초기화
		System.out.println(b1);
		
		//boolean타입은 조건문에 많이 사용
		/* 조건문에 들어갈 수 있는 조건은 결과가 무족너 참 또는 거짓을 결과로 가지는 것은 다된다.
		 * if(조건문) {참.... }
		 * else {거짓....}
		 * 
		 * */
		if(87>=90) {System.out.println("참이면 실행");}
		else {System.out.println("거짓이면 실행");}
		
		if(b) {System.out.println("참이면 실행");}
		else {System.out.println("거짓이면 실행");}
		
		if(b1) {System.out.println("참이면 실행");}
		else {System.out.println("거짓이면 실행");}
		
		/*
		 * 수 : 정수와 실수-메모리에 표현방법이 다르다. 숫자를 정수와 실수로 나누었다.
		 * 1. 정수 : 자료형 byte(1바이트), short(2), 기본int(4), long(8)
		 * 		장점: 정확하게 수를 메모리에 표현가능
		 * 		단점: 그러나 표현범위가 좁다.
		 * 
		 * 2. 실수 : 자료형 float(4), double(8바이트)
		 * 		장점: 표현범위가 넓다.
		 * 		단점: 정밀도가 떨어짐(정확히 표현이 안될때는 그냥 근사치로라도 표현하겠따는 뜻 이때, 오차발생을 하더라도 표현함)
		 * 		정밀도는 float보다 'double'이 높다.
		 */
		System.out.println(Integer.MAX_VALUE);//2의 31승 -1
		System.out.println(Integer.MIN_VALUE);//2의 -32승
		
		System.out.println(Float.MAX_VALUE);
		System.out.println(Float.MIN_VALUE);//2의 -149승
	
		System.out.println("###정수 표현방법###");//"문자열은 그대로 출력"
		byte bt=3, bt2=7;
		bt=(byte)300; // 강제로 형변환시키면 데이터손실이 발생할 수 있다. 데이터손실은 데이터가 클때 발생가능성이 있음.
		System.out.println(bt); //44? 데이터 손실 발생
		
		int bt3=300;
		System.out.println(bt3);
		
		double bt4=300; //int 300->double 300.0로 '자동 형변환'시켜 저장
		System.out.println(bt4);//300
		
		bt3=(int)123.45;//정수=실수 123.45->123
		System.out.println(bt3);//데이터손실이 발생 
		
		/*
		 * 외쪽은 변수만 = 오른쪽은 리터럴/메서드(소문자로시작하고 괄호가있는것)/변수
		 * 
		 * 변수 = 리터럴은 '이름없는 메모리'의(정수-4(int), 실수-8(double))
		 */
		
		long i=12345678912L;// int -> long자동형변환
		long i2=12345678912L;//'이름없는 메모리' 4->8 (long) 4바이트에 못들어가기때문에 8바이트에 사용해야됨 그래서 뒤에 L이붙음

		System.out.println(Long.MAX_VALUE +","+Long.MIN_VALUE); // 8 더한 결과 
		System.out.println(Float.MAX_VALUE +","+Float.MIN_VALUE);// 4
		
		short s1=1234;
		int i3=s1;// 개인연산자를 중심으로 왼쪽은 변수만 = 변수 short->int로 자동형변환되어 저장
		long l3=i3;//int안에 값이 -> long 자동형변환 되어 저장
		double d2=l3;//long 1234이란 정수가->double 1234.0로 자동 형변환되어 저장
		System.out.println(s1+","+i3+","+l3+","+d2);
		
		l3=i3=s1=789;
		System.out.println(s1+","+i3+","+l3);
		
		/*
		 * 자동형변환 : 정수(byte->short->int->long)는 무조건 -> 실수(float.double)로 자동 형변환 된다. 반대는 강제로 형을 변화시켜 넣을 수 있다.
		 * 강제형변환 : 데이터 손실 가능성이 있음
		 */
		
		//정수 연산-정확한 결과
		int i4=17, i5=13;
		i4=i4+i5;//17+13=30
		System.out.println(i4);
		
		/*
		 * cpu : 중앙처리장치(연산, 제어)
		 * 정수: int (32767) + int(32767) => int(3000) 결과
		 */
		System.out.println(Short.MAX_VALUE+","+Short.MAX_VALUE);
		short s2=32767, s3=32767;
		short s4=(short) (s2+s3);//4바이트->2바이트. 데이터 손실 발생가능성
		System.out.println(s4);//-2
		
	}

}
